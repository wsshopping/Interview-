C++基础知识点：
1.函数重载通过函数参数列表区分不同的同名函数

2.extern关键的关键能够实现C和C++的相互调用
3.C++中通过new关键字进行动态内存申请;C++中的动态内存申请是基于类型进行的;delete关键字用于内存释放

3.new关键字与malloc函数的区别:
new关键字是C++的一部分，malloc是由C库提供的函数
new以具体类型为单位进行内存分配，malloc只能以字节为单位进行内存分配
new在申请单个类型变量时可进行初始化，malloc不具备内存初始化的特性

4.C++命名空间的使用：
使用整个命名空间：using namespace name;
使用命名空间中的变量：using name::variable;
使用默认命名空间中的变量：::variable

5.C++将强制类型转换分为4种不同的类型,xxx_cast< Type >( Expression ):
static_cast强制类型转换:用于基本类型间的转换，但不能用于基本类型指针间的转换,用于有继承关系类对象之间的转换和类指针之间的转换
const_cast强制类型转换:用于去除变量的const属性
reinterpret_cast强制类型转换:用于指针类型间的强制转换,用于整数和指针类型间的强制转换
dynamic_cast强制类型转换:主要用于类层次间的转换，还可以用于类之间的交叉转换,dynamic_cast具有类型检查的功能，比static_cast更安全

6.符号表是编译器在编译过程中产生的关于源程序中语法符号的数据结构,如常量表、变量名表、数组名表、函数名表等等
符号表是编译器自用的内部数据结构,符号表不会进入最终产生的可执行程序中
被volatile修饰的const常量不会进入符号表,退化为只读变量，每次访问都从内存中取值

7.如何理解“引用的本质就是指针常量”？
从使用C++语言的角度来看
引用与指针常量没有任何的关系
引用是变量的新名字，操作引用就是操作对应的变量
从C++编译器的角度来看
为了支持新概念“引用”必须要一个有效的解决方案
在编译器内部，使用指针常量来实现“引用”
因此“引用”在定义时必须初始化

8.深入理解extern “C”
extern “C”告诉编C++译器将其中的代码进行C方式的编译
C方式的编译主要指按照C语言的规则对函数名进行编译
函数名经过编译后可能与源码中的名字有所不同
C++编译器为了支持重载，函数名经过编译后会加上参数信息，因而编译后的函数名与源码中完全不同
C编译器不会在编译后的函数名中加上参数信息
extern “C”中的重载函数经过C方式编译后将得到相同的函数名，因此extern “C”中不允许重载函数，
但extern “C”中的函数可以与extern “C”之外的函数进行重载。

9.“类”指的是一类事物，是一个抽象的概念；“对象”指的是属于某个类的一个实体，是一个具体存在的事物
类是一种“模板”，可以通过这种模板创建出不同的对象“实例”对象“实例”是类“模板”的一个具体实现
一个类可以有很多对象，而一个对象必然属于某个类

10.类用于抽象的描述一类事物所特有的属性和行为，对象是一个具体的事物，拥有其所属类的所有属性，
并且每个属性都是一个特有的值

11.在用struct定义类时，所有成员的默认属性为public；在用class定义类时，所有成员的默认属性为private

12.类的精华在于封装,将实现细节和使用方式相分离,C++中通过public和private实现类的封装
public成员可以通过变量被外界访问,private成员只能够在类内部使用,类的定义和实现可以分开到不同的文件中

13.C++中的类可以定义与类名相同的特殊成员函数;这种与类名相同的成员函数叫做构造函数
构造函数在定义时可以有参数，但是没有任何返回类型的声明

14.类的成员函数和普通函数一样可以进行重载，并遵守相同的重载规则

15.两个特殊的构造函数
无参构造函数
当类中没有定义构造函数时，编译器默认提供一个无参构造函数，并且其函数体为空
拷贝构造函数
当类中没有定义拷贝构造函数时，编译器默认提供一个拷贝构造函数，简单的进行成员变量的值复制

16.构造函数是C++中用于初始化对象状态的特殊函数
构造函数在对象创建时自动被调用
构造函数和普通成员函数都遵循重载规则
拷贝构造函数是对象正确初始化的重要保证

17.C++中提供了初始化列表对成员变量进行初始化
语法规则
Constructor::Contructor() : m1(v1), m2(v1,v2), m3(v3)
{
    // some other assignment operation
}

18.成员变量的初始化顺序与声明的顺序相关，与在初始化列表中的顺序无关,19.类中的const成员是肯定会被分配空间的
类中的const成员变量只是一个只读变量初始化列表先于构造函数的函数体执行

19.编译器无法直接得到const成员变量的初始值，因此无法进入符号表成为真正意义上的常量。

20.初始化：被初始化的对象正在创建赋值：被赋值的对象已经存在

21.析构函数没有参数也没有任何返回类型的声明,析构函数在对象销毁时自动被调用

22.构造函数与析构函数的调用秩序
当类中有成员变量是其它类的对象时
首先调用成员变量的构造函数
调用顺序与声明顺序相同
之后调用自身类的构造函数
析构函数的调用秩序与对应的构造函数调用秩序相反

23.可以直接调用构造函数，直接调用构造函数将得到一个临时对象。

24.在C++中可以定义静态成员变量和静态成员函数
静态成员属于整个类所有，不需要依赖任何对象
可以通过类名直接访问public静态成员
可以通过对象名访问public静态成员
静态成员函数可以直接访问静态成员变量

25.C++类对象中的成员变量和成员函数是分开存储的
成员变量
普通成员变量：存储于对象中，与struct变量有相同的内存布局和字节对齐方式
静态成员变量：存储于全局数据区中
成员函数
存储于代码段中

26.静态成员函数与普通成员函数的区别
静态成员函数不包含指向具体对象的指针.C++中类的普通成员函数都隐式包含一个指向当前对象的this指针。
普通成员函数包含一个指向具体对象的指针

27.C++类中可以包含属于类概念的静态成员
静态成员变量在全局数据区分配空间
静态成员函数不包含隐藏的this指针
通过类名可以直接访问静态成员
通过对象名可以访问静态成员，所有的对象可以共享同一个类的静态成员

28.C++标准库并不是C++语言的一部分
C++标准库是由C++语言编写而成的类库和函数的集合
C++标准库中定义的类和对象都位于std命名空间中
C++标准库的头文件都不带.h后缀
C++标准库涵盖了C库的功能
C库中<name.h>头文件对应C++中的<cname>

29.C++标准库预定义了多数常用的数据结构，如：字符串，链表，队列，栈等
<bitset><deque><list><map><queue><set><stack><vector>

30.C++中操作符重载的本质
C++中通过operator关键字可以利用函数扩展操作符,operator的本质是通过函数重载实现操作符重载
friend Complex operator+ (const Complex& c1, const Complex& c2);

31.C++中的类的友元
private声明使得类的成员不能被外界访问
但是通过friend关键字可以例外的开放权限

32.操作符重载是C++的强大特性之一
操作符重载的本质是通过函数扩展操作符的语义
operator关键字是操作符重载的关键
friend关键字可以对函数或类开发访问权限
操作符重载遵循函数重载的规则

33.操作符重载的本质就是函数重载
类的成员函数是否可以作为操作符重载的函数？

34.用成员函数重载的操作符
比全局操作符重载函数少一个参数，即左操作数
不需要使用friend关键字

35.当无法修改左操作数的类时，使用全局函数进行重载
=, [], ()和->操作符只能通过成员函数进行重载,操作符重载是通过函数重载实现的
C++中通过一个占位参数来区分前置运算和后置运算

36.操作符重载可以直接使用类的成员函数实现
=, [], ()和->操作符只能通过成员函数进行重载
++操作符通过一个int参数进行前置与后置的重载
C++中不要重载&&和||操作符

37.malloc与free和new与delete有什么区别？
malloc和free是库函数，以字节为单位申请堆内存
new和delete是关键字，以类型为单位申请堆内存
malloc和free单纯的对内存进行申请与释放
对于基本类型new关键字会对内存进行初始化
对于类类型new和delete还负责构造函数和析构函数的调用

38.类的静态成员能用来干嘛呢？:对象数目控制

39.面向对象中的继承指类之间的父子关系
子类拥有父类的所有成员变量和成员函数
子类就是一种特殊的父类
子类对象可以当作父类对象使用
子类可以拥有父类没有的方法和属性

40.C++中class的继承默认为private继承
private继承的子类拥有父类的所有成员
private继承使得父类的所有成员在子类中变为private成员

41.C++中的访问级别与继承
public继承
父类成员在子类中保持原有访问级别
private继承
父类成员在子类中变为private成员

42.类的protected成员
protected成员可以在子类中被访问，但不能在外界被访问
protected成员的访问权限介于public和private之间

43.类成员访问级别设置的原则
需要被外界访问的成员直接设置为public
只能在当前类中访问的成员设置为private,private成员在子类中依然存在，但是却无法访问到。
只能在当前类和子类中访问的成员设置为protected

44.继承是一种类之间的关系，子类是一种特殊的父类
子类通过继承可以得到父类的所有成员
private成员可以被子类继承但不能被子类访问
protected成员只能在当前类和子类中被访问
不同的继承方式可能改变继承成员的访问属性

45.赋值兼容性原则
子类对象可以当作父类对象使用
子类对象可以直接赋值给父类对象
子类对象可以直接初始化父类对象
父类指针可以直接指向子类对象
父类引用可以直接引用子类对象
同名成员通过作用域分辨符进行区分

46.类在C++编译器的内部可以理解为结构体
子类是由父类成员叠加子类新成员得到的

47.在子类对象构造的时候需要调用父类构造函数对其继承得来的成员进行初始化
在子类对象析构的时候需要调用父类析构函数对其继承得来的成员进行清理

48.子类对象在创建时会首先调用父类的构造函数
父类构造函数执行结束后，执行子类的构造函数
当父类的构造函数有参数时，需要在子类的初始化列表中显示调用
析构函数调用的先后顺序与构造函数相反
口诀：先父母，后客人，再自己。

49.函数重写
在子类中定义与父类中原型相同的函数
函数重写只发生在父类与子类之间

50.父类中被重写的函数依然会继承给子类
默认情况下子类中重写的函数将隐藏父类中的函数
通过作用域分辨符::可以访问到父类中被隐藏的函数

51.C++与C相同，是静态编译型语言
在编译时，编译器自动根据指针的类型判断指向的是一个什么样的对象
所以编译器认为父类指针指向的是父类对象（根据赋值兼容性原则，这个假设合理）
由于程序没有运行，所以不可能知道父类指针指向的具体是父类对象还是子类对象
从程序安全的角度，编译器假设父类指针只指向父类对象，因此编译的结果为调用父类的成员函数

52.面向对象中的多态
根据实际的对象类型决定函数调用语句的具体调用目标
多态：同样的调用语句有多种不同的表现形态
如果父类指针指向的是父类对象则调用父类中定义的函数
如果父类指针指向的是子类对象则调用子类中定义的重写函数

53.C++中的多态支持
C++中通过virtual关键字对多态进行支持
使用virtual声明的函数被重写后即可展现多态特性
真相只有一个！
这就是传说中的虚函数！

54.
函数重写是面向对象中很可能发生的情形
函数重写只可能发生在父类与子类之间
需要根据实际对象的类型确定调用的具体函数
virtual关键字是C++中支持多态的唯一方式
被重写的虚函数即可表现出多态的特性

55.函数重载
必须在同一个类中进行
子类无法重载父类的函数，父类同名函数将被覆盖
重载是在编译期间根据参数类型和个数决定调用函数
函数重写
必须发生于父类与子类之间
并且父类与子类中的函数必须有完全相同的原型
使用virtual声明之后能够产生多态
多态是在运行期间根据具体对象的类型决定调用函数

56.C++中多态的实现原理
当类中声明虚函数时，编译器会在类中生成一个虚函数表
虚函数表是一个存储类成员函数指针的数据结构
虚函数表是由编译器自动生成与维护的
virtual成员函数会被编译器放入虚函数表中
存在虚函数时，每个对象中都有一个指向虚函数表的指针

57.编译器确定func()是否为虚函数？
Yes ? 编译器在对象VPTR所指向的虚函数表中查找func()，并调用，查找和调用在运行时完成
No ? 编译器直接可以确定并找到被调用的成员函数

58.对象中的VPTR指针什么时候被初始化？
对象在创建的时候由编译器对VPTR指针进行初始化
只有当对象的构造完全结束后VPTR的指向才最终确定
父类对象的VPTR指向父类虚函数表
子类对象的VPTR指向子类虚函数表
结论：构造函数中调用虚函数无法实现多态。

59.面向对象中的抽象类
抽象类可用于表示现实世界中的抽象概念
抽象类是一种只能定义类型，而不能产生对象的类
抽象类只能被继承并重写相关函数
抽象类的直接特征是纯虚函数
纯虚函数是只声明函数原型，而故意不定义函数体的虚函数。

60.抽象类与纯虚函数
抽象类不能用于定义对象
抽象类只能用于定义指针和引用
抽象中的纯虚函数必须被子类重写
area是纯虚函数，= 0 告诉编译器，这个函数故意只声明不定义。

61.函数重载与函数重写不同
多态是通过虚函数表实现的
虚函数在效率上会受到影响
抽象类可用于表示现实世界中的抽象概念
抽象类是通过纯虚函数实现的

62.函数模板的深入理解：
编译器并不是把函数模板处理成能够处理任意类型的函数，编译器从函数模板中通过具体类型产生不同的函数。
编译器会对函数模板进行两次编译，第一次是在声明的地方对函数模板代码本身进行编译，查看是否有语法错误。
第二次是在模板函数被调用的地方对参数替换后的代码进行编译。
使用函数模板的过程是，首先声明并定义函数模板，当调用函数模板的时候，编译器自己或程序员显示获得模
板中参数的类型。当获得参数类型后，编译器会根据参数类型和函数模板产生一个具体参数类型的函数，
并调用这个函数，而不是调用函数模板(这个过程可以参看程序的汇编代码，可知调用了那种参数类型的函数模板，
就会产生那种参数类型的具体函数，没调用的类型则没有)。即void swap1(T& a, T& b)这个函数模板，
可适合char、int、double等类型。如果不调用swap1这个函数，函数模板则不会被编译进程序成为最终的二进制文件，
不占用空间。如果只这样swap1<int>(a, b)调用函数，最终的二进制文件中只有一个void swap1(int& a, int& b)
这样的函数，没有其他类型的函数。
template <typename T>  
void swap1(T& a, T& b)  
{  
    T c = a;  
    a = b;  
    b = c;  
}  

63.智能指针

64.STL主要由：容器、算法、迭代器三个部分组成，
容器：管理数据的集合
算法：处理集合内的元素
迭代器：遍历集合内的元素
容器中存放的都必须是值而不能是引用
容器内部实施的是值拷贝
容器中可以存放指针作为元素














