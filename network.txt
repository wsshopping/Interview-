1.tcp和udp的区别
TCP---传输控制协议,提供的是面向连接、可靠的字节流服务。当客户和服务器彼此交换数据前，
必须先在双方之间建立一个TCP连接，之后才能传输数据。TCP提供超时重发，丢弃重复数据，
检验数据，流量控制等功能，保证数据能从一端传到另一端。
UDP---用户数据报协议，是一个简单的面向数据报的运输层协议。UDP不提供可靠性，它只是把
应用程序传给IP层的数据报发送出去，但是并不能保证它们能到达目的地。由于UDP在传输数据
报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快

2.流量控制和拥塞控制的实现机制
对于成块数据流，TCP利用滑动窗口机制来实现流量的控制，对于交互数据流，TCP利用捎带ACK
和Nagle算法来实现流量的控制。
拥塞控制的实现机制是慢启动算法
  
3.多线程如何同步？
最常用的是互斥锁、条件变量和信号量
互斥锁，就是在各个线程要使用的一些公共数据之前加锁，使用之后释放锁，这个是非常常用的
线程安全控制的方法，而频繁的加解锁也对效率有一定的影响。
条件变量，而条件变量通过允许线程阻塞和等待另一个线程发送信号的方法弥补了互斥锁的不足，
它常和互斥锁一起使用。
信号量本质上是一个非负的整数计数器，它被用来控制对公共资源的访问。当公共资源增加时，
调用函数sem_post（）增加信号量。只有当信号量值大于０时，才能使用公共资源，使用后，
函数sem_wait（）减少信号量。

4.进程间通讯的方式有哪些，各有什么优缺点？
进程间通信主要包括管道, 消息队列,信号量,共享存储, socket.
管道包括三种:
1)普通管道PIPE, 通常有种限制,一是半双工,只能单向传输;二是只能在父子进程间使用. 
2)流管道s_pipe: 去除了第一种限制,可以双向传输. 
3)命名管道:name_pipe, 去除了第二种限制,可以在许多并不相关的进程之间进行通讯
管道: 优点是所有的UNIX实现都支持, 并且在最后一个访问管道的进程终止后,管道就被完全删除;
	缺陷是管道只允许单向传输或者用于父子进程之间
系统IPC: 优点是功能强大,能在毫不相关进程之间进行通讯; 缺陷是关键字KEY_T使用了内核标识,
	占用了内核资源,而且只能被显式删除,而且不能使用SOCKET的一些机制,例如select,epoll等.
socket可以跨网络通讯，其他进程间通讯的方式都不可以，只能是本机进程通讯。

5.tcp连接建立的时候3次握手的具体过程，以及其中的每一步是为什么
建立连接采用的3次握手协议，具体是指：
第一次握手是客户端connect连接到server，server accept client的请求之后，向client端发送一个消息，
相当于说我都准备好了，你连接上我了，这是第二次握手，第3次握手就是client向server发送的，
就是对第二次握手消息的确认。之后client和server就开始通讯了。

6.tcp断开连接的具体过程，其中每一步是为什么那么做
断开连接的一端发送close请求是第一次握手，另外一端接收到断开连接的请求之后需要对close进行确认，
发送一个消息，这是第二次握手，发送了确认消息之后还要向对端发送close消息，要关闭对对端的连接，
这是第3次握手，而在最初发送断开连接的一端接收到消息之后，进入到一个很重要的状态time_wait状态，
这个状态也是面试官经常问道的问题，最后一次握手是最初发送断开连接的一端接收到消息之后。对消息的确认。

7.tcp建立连接和断开连接的各种过程中的状态转换细节

8.epool与select的区别
select在一个进程中打开的最大fd是有限制的，由FD_SETSIZE设置，默认值是2048。不过 epoll则没有这个限制，
它所支持的fd上限是最大可以打开文件的数目，这个数字一般远大于2048，一般来说内存越大，fd上限越大，
1G内存都能达到大约10w左右。
select的轮询机制是系统会去查找每个fd是否数据已准备好，当fd很多的时候，效率当然就直线下降了，epoll
采用基于事件的通知方式，一旦某个fd数据就绪时，内核会采用类似callback的回调机制，迅速激活这个文件
描述符，而不需要不断的去轮询查找就绪的描述符，这就是epool高效最本质的原因。
无论是select还是epoll都需要内核把FD消息通知给用户空间，如何避免不必要的内存拷贝就很重要，在这点上，
epoll是通过内核于用户空间mmap同一块内存实现的，而select则做了不必要的拷贝

9.epool中et和lt的区别与实现原理
LT：水平触发，效率会低于ET触发，尤其在大并发，大流量的情况下。但是LT对代码编写要求比较低，不容易出现问题。
LT模式服务编写上的表现是：只要有数据没有被获取，内核就不断通知你，因此不用担心事件丢失的情况。
ET：边缘触发，效率非常高，在并发，大流量的情况下，会比LT少很多epoll的系统调用，因此效率高。但是对编程要求高，
需要细致的处理每个请求，否则容易发生丢失事件的情况。
另一点区别就是设为ET模式的文件句柄必须是非阻塞的

10.写一个server程序需要注意哪些问题
网络模型；
2）事件模型也可以；
3）完成端口模型；
4）用select或异步select实现都可以；
简单的话多线程就可以解决，即每accept一个客户端就创建一个线程，另外winsock 有5种I/O模型，Select、异步事件、
事件选择、重叠IO、完成端口，都可以实现一定数量的并发连接

11.网络模型
应用层（表示层，会话层）传输层、网络层、链路层、物理层
