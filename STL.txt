#include <map>
#include <string>
#include <iostream>
Using namespace std;
Int main()
{
       Map<int, string> mapStudent;
Pair<map<int, string>::iterator, bool> Insert_Pair;
       Insert_Pair＝mapStudent.insert(pair<int, string>(1, “student_one”));
       If(Insert_Pair.second == true)
       {
              Cout<<”Insert Successfully”<<endl;
       }
       Else
       {
              Cout<<”Insert Failure”<<endl;
       }
       Insert_Pair＝mapStudent.insert(pair<int, string>(1, “student_two”));
       If(Insert_Pair.second == true)
       {
              Cout<<”Insert Successfully”<<endl;
       }
       Else
       {
              Cout<<”Insert Failure”<<endl;
       }
       map<int, string>::iterator  iter;
       for(iter = mapStudent.begin(); iter != mapStudent.end(); iter++)
{
       Cout<<iter->first<<”   ”<<iter->second<<end;
}
}
STL共有六大组件
 1、容器。2、算法。3、迭代器。4、仿函数。6、适配器。
 迭代器提供对一个容器中的对象的访问方法，并且定义了容器中对象的范围。迭代器就如同一个指针。事实上，C++的指针也是一种迭代器。但是，迭代器不仅仅是指针，因此你不能认为他们一定具有地址值。例如，一个数组索引，也可以认为是一种迭代器。
STL容器的实现原理
STL来管理数据十分方便,省去了我们自己构建数据结构的时间.其实,STL的实现也是基于我们常见的数据结构.

序列式容器：
vector-数组，元素不够时再重新分配内存，拷贝原来数组的元素到新分配的数组中。
list－双链表。
deque-分配中央控制器map(并非map容器)，map记录着一系列的固定长度的数组的地址.记住这个map仅仅保存的是数组的地址,真正的数据在数组中存放着.deque先从map中央的位置(因为双向队列，前后都可以插入元素)找到一个数组地址，向该数组中放入数据，数组不够时继续在map中找空闲的数组来存数据。当map也不够时重新分配内存当作新的map,把原来map中的内容copy的新map中。所以使用deque的复杂度要大于vector，尽量使用vector。
stack-基于deque。
queue-基于deque。
heap-完全二叉树，使用最大堆排序，以数组(vector)的形式存放。
priority_queue-基于heap。
slist-单向链表。
 
关联式容器：
set,map,multiset,multimap-基于红黑树(RB-tree)，一种加上了额外平衡条件的二叉搜索树。
hash table-散列表。将待存数据的key经过映射函数变成一个数组(一般是vector)的索引，例如：数据的key%数组的大小＝数组的索引(一般文本通过算法也可以转换为数字)，然后将数据当作此索引的数组元素。有些数据的key经过算法的转换可能是同一个数组的索引值(碰撞问题，可以用线性探测，二次探测来解决)，STL是用开链的方法来解决的，每一个数组的元素维护一个list，他把相同索引值的数据存入一个list，这样当list比较短时执行删除，插入，搜索等算法比较快。
hash_map,hash_set,hash_multiset,hash_multimap-基于hash table。
 
综上所述大家应该知道了什么情况下该使用哪一个STL容器更合适,可以在适当时候避免使用一些影响效率的STL容器.

list支持快速的插入和删除，但是查找费时;

vector支持快速的查找，但是插入费时。

map查找的时间复杂度是对数的，这几乎是最快的，hash也是对数的。 
如果我自己写，我也会用二叉检索树，它在大部分情况下可以保证对数复杂度，最坏情况是常数复杂度，
而std::map在任何情况下都可以保证对数复杂度，原因是它保证存诸结构是完全二叉检索树，但这会在存
诸上牺牲一些时间。

STL   中的   map   内部是平衡二叉树，所以平衡二叉树的性质都具备。查找数据的时间也是对数时间。 vector，
在分配内存上一般要比   new   高效的多。

为什么说   hash_map   是对数级的？在不碰撞的情况下，hash_map是所有数据结构中查找最快的，它是常数级的。 
如果对问题设计了足够好的hash算法，保证碰撞率很低，hash_map的查找效率无可置疑。 
另外，STL的map，它的查找是对数级的，是除hash_map外最高的了，你可以说“也许还有改进余地”，但对于99.9999%的程序员，设计一个比STL   map好的map，我执悲观态度。 
STL的map有平衡策略（比如红黑树什么的），所以不会退化，不需要考虑数据本身的分布问题。只不过，如果数据本身是排好序的，用vector或heap会明显的快些，因为它们的访问比较简单。


我想没必要怀疑stl::map的查找效率,影响效率最主要的因素是什么?算法,在查找问题上,有什么算法比RB_tree更好吗？
至少现在还没有。不否 认你可以通过自己写代码，设计一个符合你需要的BR―TREE，比stl：：map简捷那么一点，但最多
也就每次迭代中少一行指令而已，处理十万个数据多 执行十万行指令，这对你重要吗？如果你不是在设计OS像LINUX，
没人会关注这十万行指令花的时间。 
rb-tree的时间花在了插入和删除上，如果你不是对插入和删除效率要求很高，你没有理由不选择基于rb-tree的stl::map。


大多数程序员写不出比std::map更好的map，这是当然的。然而并不是std::map的所有特性都出现在我们的程序中，自己编
写的可以更适合自己的程序，的确会比std::map更快一些。


关于hash_map，它与map的实现机制是不一样的，map内部一般用树来实现，其查找操作是O(logN)的，这个没有争议，我就
不多说了。 
hash_map的查找，内部是通过一个从key到value的运算函数来实现的，这个函数“只接受key作为参数”，也就是说，hash_map
的查找 算法与数据量无关，所以认为它是O(1)级的。来这里的应该都是达人，可以参看《数据结构》。当然，事实总不这样
完美，再引一段前面我自已说的话，进一步 说明，以免误会：

----------------------------------------- 
在不碰撞的情况下，hash_map是所有数据结构中查找最快的，它是常数级的。 
------------------------------------------ 
注意我的前提：“在不碰撞的情况下”，其实换句话说，就是要有足够好的hash函数，它要能使key到value的映射足够均匀，
否则，在最坏的情况下，它的计算量就退化到O(N)级，变成和链表一样。 
如果说   hash_map   是所有容器中最慢的，也只能说：“最拙劣的hash函数”会使hash_map成为查找最慢的容器。但这样说
意义不大，因为，最凑巧的排列能使冒泡排序成为最快的排序算法。

BS: "对于大型容器而言,hash_map能够提供比map快5至10倍的元素查找速度是很常见的,尤其是在查找速度特别重要的地方.
另一方面,如果hash_map选择了病态的散列函数,他也可能比map慢得多. "

ANSIC++在1998年之后就没再有重大改变，并且决定不再向C++标准库中做任何重大的变更，正是这个原因，
hash   table(包括hash_map)并没有被列入标准之中，虽然它理应在C++标准之中占有一席之地。 
虽然，现在的大多数编译平台支持hash   table，但从可移植性方面考虑，还是不用hash   table的好。


hehe俺也来凑凑热闹。 
1.有的时候vector可以替代map 
比如key是整数，就可以以key的跨度作为长度来定义vector。 
数据规模很大的时候，差异是惊人的。当然，空间浪费往往也惊人。 
2.hash是很难的东西 
没有高效低碰撞的算法，hash_xxx没有意义。 
而对不同的类型，数据集，不可能有优良的神仙算法。必须因场合而宜。 
俺有的解决方法是GP，可不是饭型，是遗传编程，收效不错。


你的百万级的数据放到vector不大合适。因为vector需要连续的内存空间，显然在初始化这个容器的时候会花费很大的容量。 
使用map，你想好了要为其建立一个主键吗？如果没有这样的需求，为什么不考虑deque或者list？ 
map默认使用的是deque作为容器。其实map不是容器，拿它与容器比较意义不大。因为你可以配置它的底层容器类型。


如果内存不是考虑的问题。用vector比map好。map每插入一个数据，都要排序一次。所以速度反不及先安插所有元素，
再进行排序。

用 binary_search对已序区间搜索，如果是随机存取iterator，则是对数复杂度。可见，在不考虑内存问题的情况下，
vector比map 好。


如果你需要在数据中间进行插入，list 是最好的选择，vector   的插入效率会让你痛苦得想死。


涉及到查找的话用map比较好，因为map的内部数据结构用rb-tree实现，而用vector你只能用线性查找，效率很低。

stl还提供了 hash容器，理论上查找是飞快~~~。做有序插入的话vector是噩梦，map则保证肯定是按key排序的，list
要自己做些事情。


HASH类型的查找肯定快，是映射关系嘛，但是插入和删除却慢，要做移动操作, LIST类型的使链式关系，插入非常快，
但是查找却费时，需要遍历~~ , 还是用LIST类型的吧，虽然查找慢点，

先快速排序，然后二分查找，效率也不低






一. 种类：
标准STL序列容器：vector、string、deque和list。
标准STL关联容器：set、multiset、map和multimap。
非标准序列容器slist和rope。slist是一个单向链表，rope本质上是一个重型字符串
非标准关联容器hash_set、hash_multiset、hash_map和hash_multimap。
几种标准非STL容器，包括数组、bitset、valarray、stack、queue和priority_queue
      值得注意的是，数组可以和STL算法配合，因为指针可以当作数组的迭代器使用。

  二.删除元素
如果想删除东西，记住remove算法后，要加上erase
所谓删除算法，最终还是要调用成员函数去删除某个元素，但是因为remove并不知道它现在作用于哪个容器，所以remove算法不可能真的删除一个元素
1.Vector
 
 复制代码
vector<int> v;   
v.reserve(10);   
for (int i = 1; i <= 10; ++i) {
 v.push_back(i);
}
cout << v.size();   // 10
v[3] = v[5] = v[9] = 99; 
remove(v.begin(), v.end(), 99); 
//v.erase(remove(v.begin(),v.end(),99),v.end());
cout << v.size();   // 10！
 复制代码
2. list
list<int> listTest;
listTest.remove(99);//这个成员函数将真的删除元素，并且要比erase+remove高效
remove和remove_if之间的十分相似。但unique行为也像remove。它用来从一个区间删除东西（邻近的重复值）而不用访问持有区间元素的容器。如果你真的要从容器中删除元素，你也必须成对调用unique和erase，unique在list中也类似于remove。正像list::remove真的删除东西（而且比erase-remove惯用法高效得多）。list::unique也真的删除邻近的重复值（也比erase-unique高效）。
 
三 迭代器失效：
 
一个网友提的问题：
 
void   main() 
{ 
vector <string> vcs; 
vcs.push_back( "this   is   A "); 
vector <string   > ::iterator   it=vcs.begin(); 
int   i=9; 
for(;it!=vcs.end();++it) 
{ 
cout < < "caplity   of   vector   is   :   " < <vcs.size() < <endl; 

cout < < "---> " < <*it < <endl;   //去掉此句会有一个超过vector 
                                   //大小的循环，高手能解释一下为什么? 
if(i==9) 
{ 
vcs.push_back( "this   is   BBBBB "); 
cout < < "vcs.push! " < <endl; 
} 
i=8; 
} 
}
典型的迭代器失效.
 
vector：
1.当插入（push_back）一个元素后，end操作返回的迭代器肯定失效。
2.当插入(push_back)一个元素后，capacity返回值与没有插入元素之前相比有改变，则需要重新加载整个容器，此时first和end操作返回的迭代器都会失效。
3.当进行删除操作（erase，pop_back）后，指向删除点的迭代器全部失效；指向删除点后面的元素的迭代器也将全部失效。
deque迭代器的失效情况：
1.在deque容器首部或者尾部插入元素不会使得任何迭代器失效。
2.在其首部或尾部删除元素则只会使指向被删除元素的迭代器失效。
3.在deque容器的任何其他位置的插入和删除操作将使指向该容器元素的所有迭代器失效。
List/set/map
1.删除时，指向该删除节点的迭代器失效
 复制代码
list<int> intList; 
list<int>::iterator it = intList.begin(); 
while(it != intList.end()) 
{ 
it = intList.erase(it); 
…… 
}
 复制代码
四.选择时机<转>--总结各种容器特点
(1) vector
内部数据结构：数组。
随机访问每个元素，所需要的时间为常量。
在末尾增加或删除元素所需时间与元素数目无关，在中间或开头增加或删除元素所需时间随元素数目呈线性变化。
可动态增加或减少元素，内存管理自动完成，但程序员可以使用reserve()成员函数来管理内存。
vector的迭代器在内存重新分配时将失效（它所指向的元素在该操作的前后不再相同）。当把超过capacity()-size()个元素插入vector中时，内存会重新分配，所有的迭代器都将失效；否则，指向当前元素以后的任何元素的迭代器都将失效。当删除元素时，指向被删除元素以后的任何元素的迭代器都将失效。

(2)deque
内部数据结构：数组。
随机访问每个元素，所需要的时间为常量。
在开头和末尾增加元素所需时间与元素数目无关，在中间增加或删除元素所需时间随元素数目呈线性变化。
可动态增加或减少元素，内存管理自动完成，不提供用于内存管理的成员函数。
增加任何元素都将使deque的迭代器失效。在deque的中间删除元素将使迭代器失效。在deque的头或尾删除元素时，只有指向该元素的迭代器失效。

(3)list
内部数据结构：双向环状链表。
不能随机访问一个元素。
可双向遍历。
在开头、末尾和中间任何地方增加或删除元素所需时间都为常量。
可动态增加或减少元素，内存管理自动完成。
增加任何元素都不会使迭代器失效。删除元素时，除了指向当前被删除元素的迭代器外，其它迭代器都不会失效。

(4)slist
内部数据结构：单向链表。
不可双向遍历，只能从前到后地遍历。
其它的特性同list相似。

(5)stack
适配器，它可以将任意类型的序列容器转换为一个堆栈，一般使用deque作为支持的序列容器。
元素只能后进先出（LIFO）。
不能遍历整个stack。

(6)queue
适配器，它可以将任意类型的序列容器转换为一个队列，一般使用deque作为支持的序列容器。
元素只能先进先出（FIFO）。
不能遍历整个queue。

(7)priority_queue
适配器，它可以将任意类型的序列容器转换为一个优先级队列，一般使用vector作为底层存储方式。
只能访问第一个元素，不能遍历整个priority_queue。
第一个元素始终是优先级最高的一个元素。

(8)set
键和值相等。
键唯一。
元素默认按升序排列。
如果迭代器所指向的元素被删除，则该迭代器失效。其它任何增加、删除元素的操作都不会使迭代器失效。

(9)multiset
键可以不唯一。
其它特点与set相同。

(10)hash_set
与set相比较，它里面的元素不一定是经过排序的，而是按照所用的hash函数分派的，它能提供更快的搜索速度（当然跟hash函数有关）。
其它特点与set相同。

(11)hash_multiset
键可以不唯一。
其它特点与hash_set相同。

(12)map
键唯一。
元素默认按键的升序排列。
如果迭代器所指向的元素被删除，则该迭代器失效。其它任何增加、删除元素的操作都不会使迭代器失效。

(13)multimap
键可以不唯一。
其它特点与map相同。

(14)hash_map
与map相比较，它里面的元素不一定是按键值排序的，而是按照所用的hash函数分派的，它能提供更快的搜索速度（当然也跟hash函数有关）。
其它特点与map相同。

(15)hash_multimap
键可以不唯一。
其它特点与hash_map相同。